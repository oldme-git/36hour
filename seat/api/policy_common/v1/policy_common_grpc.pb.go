// protoc --go_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: policy_common/v1/policy_common.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PolicyCommon_Create_FullMethodName  = "/seat.PolicyCommon/Create"
	PolicyCommon_GetOne_FullMethodName  = "/seat.PolicyCommon/GetOne"
	PolicyCommon_GetList_FullMethodName = "/seat.PolicyCommon/GetList"
	PolicyCommon_Update_FullMethodName  = "/seat.PolicyCommon/Update"
	PolicyCommon_Delete_FullMethodName  = "/seat.PolicyCommon/Delete"
)

// PolicyCommonClient is the client API for PolicyCommon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicyCommonClient interface {
	Create(ctx context.Context, in *CreatePolicyCommonReq, opts ...grpc.CallOption) (*CreatePolicyCommonRes, error)
	GetOne(ctx context.Context, in *GetOnePolicyCommonReq, opts ...grpc.CallOption) (*GetOnePolicyCommonRes, error)
	GetList(ctx context.Context, in *GetListPolicyCommonReq, opts ...grpc.CallOption) (*GetListPolicyCommonRes, error)
	Update(ctx context.Context, in *UpdatePolicyCommonReq, opts ...grpc.CallOption) (*UpdatePolicyCommonRes, error)
	Delete(ctx context.Context, in *DeletePolicyCommonReq, opts ...grpc.CallOption) (*DeletePolicyCommonRes, error)
}

type policyCommonClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyCommonClient(cc grpc.ClientConnInterface) PolicyCommonClient {
	return &policyCommonClient{cc}
}

func (c *policyCommonClient) Create(ctx context.Context, in *CreatePolicyCommonReq, opts ...grpc.CallOption) (*CreatePolicyCommonRes, error) {
	out := new(CreatePolicyCommonRes)
	err := c.cc.Invoke(ctx, PolicyCommon_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyCommonClient) GetOne(ctx context.Context, in *GetOnePolicyCommonReq, opts ...grpc.CallOption) (*GetOnePolicyCommonRes, error) {
	out := new(GetOnePolicyCommonRes)
	err := c.cc.Invoke(ctx, PolicyCommon_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyCommonClient) GetList(ctx context.Context, in *GetListPolicyCommonReq, opts ...grpc.CallOption) (*GetListPolicyCommonRes, error) {
	out := new(GetListPolicyCommonRes)
	err := c.cc.Invoke(ctx, PolicyCommon_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyCommonClient) Update(ctx context.Context, in *UpdatePolicyCommonReq, opts ...grpc.CallOption) (*UpdatePolicyCommonRes, error) {
	out := new(UpdatePolicyCommonRes)
	err := c.cc.Invoke(ctx, PolicyCommon_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyCommonClient) Delete(ctx context.Context, in *DeletePolicyCommonReq, opts ...grpc.CallOption) (*DeletePolicyCommonRes, error) {
	out := new(DeletePolicyCommonRes)
	err := c.cc.Invoke(ctx, PolicyCommon_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyCommonServer is the server API for PolicyCommon service.
// All implementations must embed UnimplementedPolicyCommonServer
// for forward compatibility
type PolicyCommonServer interface {
	Create(context.Context, *CreatePolicyCommonReq) (*CreatePolicyCommonRes, error)
	GetOne(context.Context, *GetOnePolicyCommonReq) (*GetOnePolicyCommonRes, error)
	GetList(context.Context, *GetListPolicyCommonReq) (*GetListPolicyCommonRes, error)
	Update(context.Context, *UpdatePolicyCommonReq) (*UpdatePolicyCommonRes, error)
	Delete(context.Context, *DeletePolicyCommonReq) (*DeletePolicyCommonRes, error)
	mustEmbedUnimplementedPolicyCommonServer()
}

// UnimplementedPolicyCommonServer must be embedded to have forward compatible implementations.
type UnimplementedPolicyCommonServer struct {
}

func (UnimplementedPolicyCommonServer) Create(context.Context, *CreatePolicyCommonReq) (*CreatePolicyCommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPolicyCommonServer) GetOne(context.Context, *GetOnePolicyCommonReq) (*GetOnePolicyCommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedPolicyCommonServer) GetList(context.Context, *GetListPolicyCommonReq) (*GetListPolicyCommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedPolicyCommonServer) Update(context.Context, *UpdatePolicyCommonReq) (*UpdatePolicyCommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPolicyCommonServer) Delete(context.Context, *DeletePolicyCommonReq) (*DeletePolicyCommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPolicyCommonServer) mustEmbedUnimplementedPolicyCommonServer() {}

// UnsafePolicyCommonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicyCommonServer will
// result in compilation errors.
type UnsafePolicyCommonServer interface {
	mustEmbedUnimplementedPolicyCommonServer()
}

func RegisterPolicyCommonServer(s grpc.ServiceRegistrar, srv PolicyCommonServer) {
	s.RegisterService(&PolicyCommon_ServiceDesc, srv)
}

func _PolicyCommon_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyCommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyCommonServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyCommon_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyCommonServer).Create(ctx, req.(*CreatePolicyCommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyCommon_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnePolicyCommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyCommonServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyCommon_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyCommonServer).GetOne(ctx, req.(*GetOnePolicyCommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyCommon_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListPolicyCommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyCommonServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyCommon_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyCommonServer).GetList(ctx, req.(*GetListPolicyCommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyCommon_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyCommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyCommonServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyCommon_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyCommonServer).Update(ctx, req.(*UpdatePolicyCommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyCommon_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyCommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyCommonServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyCommon_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyCommonServer).Delete(ctx, req.(*DeletePolicyCommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PolicyCommon_ServiceDesc is the grpc.ServiceDesc for PolicyCommon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolicyCommon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seat.PolicyCommon",
	HandlerType: (*PolicyCommonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PolicyCommon_Create_Handler,
		},
		{
			MethodName: "GetOne",
			Handler:    _PolicyCommon_GetOne_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _PolicyCommon_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PolicyCommon_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PolicyCommon_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy_common/v1/policy_common.proto",
}
